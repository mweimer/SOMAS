			User Manual: Developing New Agents

*Note: this manual assumes the user is using the Eclipse IDE for development.

	Once a particular scenario has been created and the objective functions are determined, then agents can be created for that particular scenario. This is done by generating a chromosome that will determine an agent's behavior then optimizing that chromosome for the scenario. The optimization will be done using an evolutionary algorithm. This manual will describe how to use the Java framework jMetal, which is for multi-objective optimization, to generate new chromosomes for the agents.
	To start, you must first have the code for to run the SOMAS simulations as well as the jMetal code. To get this code, open the “CVS Repository Exploring” perceptive in Eclipse. Then create a new repository location, with the host “alpine.afit.edu” and the path “/home/afiten3/CVS/SOMAS”. Checkout the projects jmathplot, jmetal, mason, and somas. Once you have all the code checked out and on your local machine you can run the SOMAS scenarios or run jMetal which will developed new chromosomes for the scenarios.
	If you already have a chromosome, you can do a quick test run of a SOMAS scenario. First, open the Java perceptive in Eclipse and click “Run” on the menu and then click on “Run Configurations”. Create a new run configuration and set the project to “somas” and the main class to “scenario.*” where * is the class name for any of the available scenarios found in the scenario package. For example, you could use InfoWarScenario so you would put “scenario.InfoWarScenario” in the for the main class. Once this is done, select the “arguments” tab and copy and paste a chromosome in the “program arguments” field. When this is done, click the “apply” button the click the “run” button. The scenario visualizer should then launch and you will be able to view how the agent behavior, determined by the chromosome, performs within the scenario. To view a different agent's chromosome reopen the run configuration menu and change the chromosome in the program arguments.
	Once you have created a scenario or selected an existing scenario you can begin the process to generate and optimize an agent behavior (i.e. chromosome) using jMetal. You can run jMetal locally on your computer which will do the entire optimization process in serial and will take some time. You can also run jMetal on the AFIT cluster (or some other cluster) and execute the optimization process in parallel which will take a lot less time. I will begin with describing how to do the process locally. 
	First open the SOMASExperiment class in the jmetal project under the jmetal.somas package. This is the class you will run to start the optimization process. At, the top of the class file is several class fields used to set the the various setting of the evolutionary algorithm. You may adjust these as you like, also note you can set these at the command line when launching the SOMASExperiment class (see the “processArgs” method in this class). Two important fields are scenarioName and parallizeEvaluations. ScenarioName is used to determine which of these scenario you should be optimizing a chromosome for. ParallizeEvaluations is used to determine whether or not to do parallelization while running the algorithm. If you are running the code on a local machine you can still do parallelization if you have a multi-core processor. 
	The parallelization in this project is done using a Java framework called JPPF. JPPF is designed to parallize code across a computer cluster with many nodes. But, if you set the config file to run JPPF locally, it will do the parallelization using multiple cores. The local config file should already be set to do this so if you run the  SOMASExperiment class locally, it should utilize the multiple cores. If you set parallizeEvaluations to false, then JPPF will not be used and the whole thing will run in serial.
	To start the code, you will need to make a new run configuration. Click “Run” on the menu and then click on “Run Configurations”. Create a new run configuration and set the project to “jmetal” and the main class to “jmetal.somas.SOMASExperiment”. Nothing has to be set in the program arguments, though you can set the class fields using these. hen this is done, click the “apply” button the click the “run” button. The program will then launch and will take some time to finish, depending on how many generations there are to complete.	
	When the the SOMASExperiment program finishes, it will output several files *.var and *.fun files. The VAR files contain all the chromosomes that were generated from each independent run of the evolutionary algorithm as well as an aggregate file from all the generations. The FUN file contains the associated objective values for each chromosome. If you set the class field visualizeResults to true then a new class called ResultsVisualizer will launch using the data in these files. If you did not set visualizeResults to true then you can simply run the ResultsVisualizer class separately and select the output files as input.
	Running the jMetal code on the cluster is a little more complicated. The first thing you need to do is export the code into a runnable JAR file. To do this, click on “File” on the menu and then click on “Export”. Under “Java” select “Runnable JAR File” then click “Next”. Under the launch configuration drop-down menu, select the configuration used to run the SOMASExperiment class. Set the export destination to whatever you like, but make sure to name the jar file “jmetal-somas.jar” and click “Finish”. 
	Once you have the Jar file you must log in to your AFIT Linux account. Once logged in, you will need to copy several files to your home folder. On the AFIT L: drive, under the SOMAS folder there should be a folder called “cluster files”. In there is a folder called “somas”. Copy this folder, using pscp or some other ssh copy utility, to the root of your linux home folder. The folder must be in the root of your home folder and be named “somas” or else the scripts will not be able to locate certain files. If you open the “somas” folder there should be an older version of a “jmetal-somas.jar” file. Replace this file with your new one you exported. 
